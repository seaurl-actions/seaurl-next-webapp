apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod-http01
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/force-ssl-redirect: 'true'
    nginx.ingress.kubernetes.io/service-weight: ''
  generation: 3
  name: <podname>-ingress
  namespace: seaurl
spec:
  tls:
    - hosts:
        - <domainName1>
      secretName: <podname>-ingress1
    - hosts:
        - <domainName2>
      secretName: <podname>-ingress2
  rules:
    - host: <domainName1>
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: <podname>-svc
                port:
                  number: 3000
    - host: <domainName2>
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: <podname>-svc
                port:
                  number: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: <podname>-svc
  namespace: seaurl
spec:
  ports:
    - port: 3000
      protocol: TCP
      targetPort: 3000
  selector:
    app: <podname>
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: '1'
  generation: 1
  labels:
    app: <podname>
  name: <podname>
  namespace: seaurl
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: <podname>
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: <podname>
    spec:
      containers:
        # 'registry-vpc.cn-hangzhou.aliyuncs.com/com-seaurl/webapp-test:v1.2.3'
        - image: <imagename>
          imagePullPolicy: IfNotPresent
          name: <podname>
          resources:
            requests:
              cpu: 250m
              memory: 512Mi
          # terminationMessagePath: /dev/termination-log
          # terminationMessagePolicy: File
      # dnsPolicy: ClusterFirst
      # restartPolicy: Always
      # schedulerName: default-scheduler
      # securityContext: {}
      # terminationGracePeriodSeconds: 30